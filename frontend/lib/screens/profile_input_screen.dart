import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import '../user_provider.dart';
import '../core/supabase_service.dart';

class ProfileInputScreen extends StatefulWidget {
  const ProfileInputScreen({super.key});

  @override
  State<ProfileInputScreen> createState() => _ProfileInputScreenState();
}

class _ProfileInputScreenState extends State<ProfileInputScreen> {
  final _formKey = GlobalKey<FormState>();
  final _phoneController = TextEditingController();
  
  DateTime? _selectedBirthDate;
  String? _selectedGender;
  bool _privacyConsent = false;
  bool _isLoading = false;
  
  @override
  void dispose() {
    _phoneController.dispose();
    super.dispose();
  }

  // ÏÉùÎÖÑÏõîÏùº ÏÑ†ÌÉù
  Future<void> _selectBirthDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime(1980),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: Color(0xFF8CCAA7),
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
          ),
          child: child!,
        );
      },
    );

    if (picked != null && picked != _selectedBirthDate) {
      setState(() {
        _selectedBirthDate = picked;
      });
    }
  }

  // Í∞úÏù∏Ï†ïÎ≥¥ Ï†ÄÏû• Î∞è Îã§Ïùå Îã®Í≥ÑÎ°ú Ïù¥Îèô
  Future<void> _saveProfileAndContinue() async {
    if (!_formKey.currentState!.validate()) return;
    if (!_privacyConsent) {
      _showErrorDialog('Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö©Ïóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setState(() => _isLoading = true);

    try {
      final userProvider = Provider.of<UserProvider>(context, listen: false);
      
      // Supabase users ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏
      final currentUser = SupabaseService.client.auth.currentUser;
      if (currentUser != null) {
        await SupabaseService.client.from('users').update({
          'birth_date': _selectedBirthDate!.toIso8601String().split('T')[0],
          'gender': _selectedGender,
          'phone': _phoneController.text.trim(),
          'privacy_consent': true,
          'terms_accepted': true,
          'onboarding_completed': false, // ÏïÑÏßÅ Ïò®Î≥¥Îî© ÎØ∏ÏôÑÎ£å
        }).eq('id', currentUser.id);

        // UserProvider ÏóÖÎç∞Ïù¥Ìä∏
        print('üîÑ [Profile] Updating UserProvider...');
        print('üîÑ [Profile] Before - fullName: ${userProvider.fullName}');
        print('üîÑ [Profile] Before - profileImg: ${userProvider.profileImg}');
        print('üîÑ [Profile] Before - isGuardian: ${userProvider.isGuardian}');
        
        userProvider.setUserFromSupabase(
          id: currentUser.id,
          email: currentUser.email ?? '',
          fullName: userProvider.fullName,
          birthDate: _selectedBirthDate,
          gender: _selectedGender,
          phone: _phoneController.text.trim(),
          profileImageUrl: userProvider.profileImageUrl, // Í∏∞Ï°¥ ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ Ïú†ÏßÄ
          privacyConsent: true,
          termsAccepted: true,
          onboardingCompleted: false,
          isGuardian: userProvider.isGuardian, // Í∏∞Ï°¥ isGuardian Í∞í Ïú†ÏßÄ
          accessToken: SupabaseService.client.auth.currentSession?.accessToken,
        );
        
        print('üîÑ [Profile] After - fullName: ${userProvider.fullName}');
        print('üîÑ [Profile] After - profileImg: ${userProvider.profileImg}');
        print('üîÑ [Profile] After - isGuardian: ${userProvider.isGuardian}');
      }

      // Îã§Ïùå ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô - isGuardian Í∞íÏóê Îî∞Îùº Í≤∞Ï†ï
      if (mounted) {
        final isGuardian = userProvider.isGuardian;
        print('üß≠ Profile saved. isGuardian: $isGuardian');
        
        if (isGuardian) {
          print('üß≠ Guardian: navigating to 0-3-1');
          Navigator.pushReplacementNamed(context, '/0-3-1');
        } else {
          print('üß≠ Dependent: navigating to 0-3-2');
          Navigator.pushReplacementNamed(context, '/0-3-2');
        }
      }
      
    } catch (e) {
      print('Í∞úÏù∏Ï†ïÎ≥¥ Ï†ÄÏû• Ïò§Î•ò: $e');
      if (mounted) {
        _showErrorDialog('Í∞úÏù∏Ï†ïÎ≥¥ Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ÏïåÎ¶º'),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }

  void _showPrivacyPolicy() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          'Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö© ÎèôÏùò',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w700,
            fontFamily: 'Pretendard',
          ),
        ),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '1. ÏàòÏßëÌïòÎäî Í∞úÏù∏Ï†ïÎ≥¥ Ìï≠Î™©',
                style: TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
              ),
              SizedBox(height: 4),
              Text(
                '‚Ä¢ ÏÉùÎÖÑÏõîÏùº, ÏÑ±Î≥Ñ, Ï†ÑÌôîÎ≤àÌò∏\n‚Ä¢ Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ÏùÑ ÌÜµÌïú Ïù¥Î©îÏùº, ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥',
                style: TextStyle(fontSize: 13, height: 1.4),
              ),
              SizedBox(height: 12),
              Text(
                '2. Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö© Î™©Ï†Å',
                style: TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
              ),
              SizedBox(height: 4),
              Text(
                '‚Ä¢ ÏÑúÎπÑÏä§ Ï†úÍ≥µ Î∞è ÎßûÏ∂§Ìòï ÏΩòÌÖêÏ∏† Ï†úÍ≥µ\n‚Ä¢ Ïó∞Î†πÎ≥Ñ Ïù∏ÏßÄ Í∏∞Îä• ÌèâÍ∞Ä Î∞è Î∂ÑÏÑù\n‚Ä¢ Í≥†Í∞ù ÏßÄÏõê Î∞è ÏÑúÎπÑÏä§ Í∞úÏÑ†',
                style: TextStyle(fontSize: 13, height: 1.4),
              ),
              SizedBox(height: 12),
              Text(
                '3. Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ïú† Î∞è Ïù¥Ïö© Í∏∞Í∞Ñ',
                style: TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
              ),
              SizedBox(height: 4),
              Text(
                '‚Ä¢ ÏÑúÎπÑÏä§ Ïù¥Ïö© Í∏∞Í∞Ñ Ï§ë\n‚Ä¢ ÌöåÏõê ÌÉàÌá¥ Ïãú Ï¶âÏãú ÌååÍ∏∞ (Î≤ïÏ†ï Î≥¥Ï°¥ ÏùòÎ¨¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏòàÏô∏)',
                style: TextStyle(fontSize: 13, height: 1.4),
              ),
              SizedBox(height: 12),
              Text(
                '4. Í∞úÏù∏Ï†ïÎ≥¥ ÌååÍ∏∞ Ï†àÏ∞® Î∞è Î∞©Î≤ï',
                style: TextStyle(fontWeight: FontWeight.w600, fontSize: 14),
              ),
              SizedBox(height: 4),
              Text(
                '‚Ä¢ Ï†ÑÏûê ÌååÏùº ÌòïÌÉú: Î≥µÍµ¨ Î∂àÍ∞ÄÎä•Ìïú Î∞©Î≤ïÏúºÎ°ú Ï¶âÏãú ÏÇ≠Ï†ú\n‚Ä¢ Ï¢ÖÏù¥ Î¨∏ÏÑú: Î∂ÑÏáÑ ÎòêÎäî ÏÜåÍ∞Å',
                style: TextStyle(fontSize: 13, height: 1.4),
              ),
              SizedBox(height: 12),
              Text(
                '‚Äª ÏúÑ Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßëÏóê ÎèôÏùòÌïòÏßÄ ÏïäÏùÑ Í∂åÎ¶¨Í∞Ä ÏûàÏúºÎÇò, ÎèôÏùòÎ•º Í±∞Î∂ÄÌï† Í≤ΩÏö∞ ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.',
                style: TextStyle(fontSize: 12, color: Color(0xFF666666), height: 1.4),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text(
              'ÌôïÏù∏',
              style: TextStyle(
                color: Color(0xFF8CCAA7),
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context);
    
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text(
          'Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†•',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.w700,
            fontFamily: 'Pretendard',
            color: Colors.white,
          ),
        ),
        backgroundColor: const Color(0xFF8CCAA7),
        centerTitle: true,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ÏïàÎÇ¥ Î©îÏãúÏßÄ
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFF8CCAA7).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: const Color(0xFF8CCAA7).withOpacity(0.3),
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        const Icon(
                          Icons.info_outline,
                          color: Color(0xFF8CCAA7),
                          size: 20,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          'ÌôòÏòÅÌï©ÎãàÎã§, ${userProvider.fullName ?? userProvider.username ?? 'ÏÇ¨Ïö©Ïûê'}Îãò!',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w700,
                            fontFamily: 'Pretendard',
                            color: Color(0xFF8CCAA7),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'ÎßûÏ∂§Ìòï ÏÑúÎπÑÏä§ Ï†úÍ≥µÏùÑ ÏúÑÌï¥ Ï∂îÍ∞Ä Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.\nÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Îäî ÏïàÏ†ÑÌïòÍ≤å Î≥¥Ìò∏Îê©ÎãàÎã§.',
                      style: TextStyle(
                        fontSize: 14,
                        fontFamily: 'Pretendard',
                        color: Color(0xFF555555),
                        height: 1.4,
                      ),
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 32),
              
              // ÏÉùÎÖÑÏõîÏùº ÏûÖÎ†•
              const Text(
                'ÏÉùÎÖÑÏõîÏùº',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  fontFamily: 'Pretendard',
                  color: Color(0xFF333333),
                ),
              ),
              const SizedBox(height: 8),
              GestureDetector(
                onTap: _selectBirthDate,
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    border: Border.all(color: const Color(0xFFDDDDDD)),
                    borderRadius: BorderRadius.circular(12),
                    color: Colors.white,
                  ),
                  child: Row(
                    children: [
                      Icon(
                        Icons.calendar_today,
                        color: Colors.grey[600],
                        size: 20,
                      ),
                      const SizedBox(width: 12),
                      Text(
                        _selectedBirthDate != null
                            ? '${_selectedBirthDate!.year}ÎÖÑ ${_selectedBirthDate!.month.toString().padLeft(2, '0')}Ïõî ${_selectedBirthDate!.day.toString().padLeft(2, '0')}Ïùº'
                            : 'ÏÉùÎÖÑÏõîÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                        style: TextStyle(
                          fontSize: 16,
                          fontFamily: 'Pretendard',
                          color: _selectedBirthDate != null 
                              ? const Color(0xFF333333) 
                              : const Color(0xFF999999),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              if (_selectedBirthDate == null) ...[
                const SizedBox(height: 4),
                const Text(
                  'ÏÉùÎÖÑÏõîÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                  style: TextStyle(
                    fontSize: 12,
                    color: Color(0xFFE74C3C),
                    fontFamily: 'Pretendard',
                  ),
                ),
              ],
              
              const SizedBox(height: 24),
              
              // ÏÑ±Î≥Ñ ÏÑ†ÌÉù
              const Text(
                'ÏÑ±Î≥Ñ',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  fontFamily: 'Pretendard',
                  color: Color(0xFF333333),
                ),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: () => setState(() => _selectedGender = 'male'),
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: _selectedGender == 'male' 
                                ? const Color(0xFF8CCAA7) 
                                : const Color(0xFFDDDDDD),
                            width: _selectedGender == 'male' ? 2 : 1,
                          ),
                          borderRadius: BorderRadius.circular(12),
                          color: _selectedGender == 'male' 
                              ? const Color(0xFF8CCAA7).withOpacity(0.1)
                              : Colors.white,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.male,
                              color: _selectedGender == 'male'
                                  ? const Color(0xFF8CCAA7)
                                  : const Color(0xFF999999),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'ÎÇ®ÏÑ±',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                fontFamily: 'Pretendard',
                                color: _selectedGender == 'male'
                                    ? const Color(0xFF8CCAA7)
                                    : const Color(0xFF666666),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: GestureDetector(
                      onTap: () => setState(() => _selectedGender = 'female'),
                      child: Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: _selectedGender == 'female' 
                                ? const Color(0xFF8CCAA7) 
                                : const Color(0xFFDDDDDD),
                            width: _selectedGender == 'female' ? 2 : 1,
                          ),
                          borderRadius: BorderRadius.circular(12),
                          color: _selectedGender == 'female' 
                              ? const Color(0xFF8CCAA7).withOpacity(0.1)
                              : Colors.white,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.female,
                              color: _selectedGender == 'female'
                                  ? const Color(0xFF8CCAA7)
                                  : const Color(0xFF999999),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'Ïó¨ÏÑ±',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                fontFamily: 'Pretendard',
                                color: _selectedGender == 'female'
                                    ? const Color(0xFF8CCAA7)
                                    : const Color(0xFF666666),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              if (_selectedGender == null) ...[
                const SizedBox(height: 4),
                const Text(
                  'ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                  style: TextStyle(
                    fontSize: 12,
                    color: Color(0xFFE74C3C),
                    fontFamily: 'Pretendard',
                  ),
                ),
              ],
              
              const SizedBox(height: 24),
              
              // Ï†ÑÌôîÎ≤àÌò∏ ÏûÖÎ†•
              const Text(
                'Ï†ÑÌôîÎ≤àÌò∏',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  fontFamily: 'Pretendard',
                  color: Color(0xFF333333),
                ),
              ),
              const SizedBox(height: 8),
              TextFormField(
                controller: _phoneController,
                keyboardType: TextInputType.phone,
                inputFormatters: [
                  FilteringTextInputFormatter.digitsOnly,
                  LengthLimitingTextInputFormatter(11),
                ],
                decoration: InputDecoration(
                  hintText: '010-0000-0000',
                  hintStyle: const TextStyle(
                    color: Color(0xFF999999),
                    fontFamily: 'Pretendard',
                  ),
                  prefixIcon: const Icon(Icons.phone, color: Color(0xFF999999)),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: const BorderSide(color: Color(0xFFDDDDDD)),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: const BorderSide(color: Color(0xFFDDDDDD)),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: const BorderSide(color: Color(0xFF8CCAA7), width: 2),
                  ),
                  contentPadding: const EdgeInsets.all(16),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Ï†ÑÌôîÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                  }
                  if (value.length < 10 || value.length > 11) {
                    return 'Ïò¨Î∞îÎ•∏ Ï†ÑÌôîÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
                  }
                  return null;
                },
              ),
              
              const SizedBox(height: 32),
              
              // Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë ÎèôÏùò
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: const Color(0xFFF8F9FA),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: const Color(0xFFE9ECEF)),
                ),
                child: Column(
                  children: [
                    Row(
                      children: [
                        GestureDetector(
                          onTap: () => setState(() => _privacyConsent = !_privacyConsent),
                          child: Container(
                            width: 24,
                            height: 24,
                            decoration: BoxDecoration(
                              color: _privacyConsent ? const Color(0xFF8CCAA7) : Colors.white,
                              border: Border.all(
                                color: _privacyConsent ? const Color(0xFF8CCAA7) : const Color(0xFFDDDDDD),
                                width: 2,
                              ),
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: _privacyConsent
                                ? const Icon(Icons.check, color: Colors.white, size: 16)
                                : null,
                          ),
                        ),
                        const SizedBox(width: 12),
                        const Expanded(
                          child: Text(
                            'Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö©Ïóê ÎèôÏùòÌï©ÎãàÎã§',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                              fontFamily: 'Pretendard',
                              color: Color(0xFF333333),
                            ),
                          ),
                        ),
                        TextButton(
                          onPressed: _showPrivacyPolicy,
                          child: const Text(
                            'ÏÉÅÏÑ∏Î≥¥Í∏∞',
                            style: TextStyle(
                              fontSize: 13,
                              color: Color(0xFF8CCAA7),
                              fontWeight: FontWeight.w600,
                              fontFamily: 'Pretendard',
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 40),
              
              // Îã§Ïùå Î≤ÑÌäº
              SizedBox(
                width: double.infinity,
                height: 56,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _saveProfileAndContinue,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF8CCAA7),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    elevation: 0,
                  ),
                  child: _isLoading
                      ? const CircularProgressIndicator(color: Colors.white)
                      : const Text(
                          'Îã§Ïùå',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            fontFamily: 'Pretendard',
                            color: Colors.white,
                          ),
                        ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}