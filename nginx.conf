# Nginx 설정 - Memento Box 프로젝트
# FastAPI 백엔드와 React 프론트엔드를 위한 리버스 프록시 설정

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/plain
        text/css
        text/js
        text/xml
        text/javascript;

    # 업스트림 서버 정의
    upstream fastapi_backend {
        server 127.0.0.1:8000;
        # 로드 밸런싱이 필요한 경우 추가 서버들
        # server 127.0.0.1:8001;
        # server 127.0.0.1:8002;
    }

    upstream react_frontend {
        server 127.0.0.1:5173;  # Vite 개발 서버 기본 포트
    }

    # 메인 서버 블록
    server {
        listen 80;
        server_name localhost;

        # 클라이언트 요청 크기 제한 (파일 업로드 고려)
        client_max_body_size 100M;

        # 타임아웃 설정
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;

        # WebSocket 프록시를 위한 공통 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # API 요청을 FastAPI 백엔드로 프록시
        location /api/ {
            proxy_pass http://fastapi_backend;
            
            # CORS 헤더 (필요시)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # WebSocket 연결을 FastAPI 백엔드로 프록시
        location /api/v1/ws {
            proxy_pass http://fastapi_backend;
            
            # WebSocket을 위한 특별한 헤더들
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 연결 타임아웃 설정
            proxy_read_timeout 86400;  # 24시간
            proxy_send_timeout 86400;  # 24시간
            
            # 버퍼링 비활성화 (실시간 통신을 위해)
            proxy_buffering off;
        }

        # docs와 redoc을 FastAPI로 프록시
        location ~ ^/(docs|redoc) {
            proxy_pass http://fastapi_backend;
        }

        # 정적 파일들 (React 빌드된 파일들)
        location / {
            # 개발 환경에서는 React 개발 서버로 프록시
            proxy_pass http://react_frontend;
            
            # Hot Module Replacement를 위한 WebSocket 프록시
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # React Router를 위한 fallback (SPA 설정)
        location ~ ^/(?!api|docs|redoc) {
            try_files $uri $uri/ @react_fallback;
        }

        location @react_fallback {
            proxy_pass http://react_frontend;
        }

        # 에러 페이지
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS 설정 (프로덕션용 - 추후 SSL 인증서 설정 시 사용)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /path/to/certificate.crt;
    #     ssl_certificate_key /path/to/private.key;
    #
    #     # SSL 설정
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256;
    #     ssl_prefer_server_ciphers off;
    #
    #     # 위의 location 블록들을 동일하게 적용
    # }
}

# 개발 환경에서 사용하는 간단한 설정
# 프로덕션에서는 위의 설정을 사용하고, 
# 개발에서는 아래와 같은 간소화된 설정도 사용 가능

# http {
#     upstream backend {
#         server localhost:8000;
#     }
#
#     server {
#         listen 80;
#         server_name localhost;
#
#         location /api/ {
#             proxy_pass http://backend;
#         }
#
#         location / {
#             proxy_pass http://localhost:5173;
#         }
#     }
# }